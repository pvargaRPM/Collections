{
	"info": {
		"_postman_id": "1ba3e930-e5e1-4114-aa93-fb0c32ea3c84",
		"name": "RPM API",
		"description": "**PROD**:\n\n**STAGE**: [https://apim-rpm-api-stg.azure-api.net/v1](https://apim-rpm-api-stg.azure-api.net/v1)  \n\n**Swaggers:**[<br>](https://apim-rpm-api-stg.azure-api.net/v1)[RPM_Api | v1 | RPMMoves | SwaggerHub](https://app.swaggerhub.com/apis/RPMMoves/RPM_Api/v1#/Order%20Endpoints/Order-Document-Get)\n\n[https://app.swaggerhub.com/apis/RPMMoves/RPM_Api/](https://app.swaggerhub.com/apis/RPMMoves/RPM_Api/)\n\n[Swagger UI (app-rpm-clean-orders-dev.azurewebsites.net)](https://app-rpm-clean-orders-dev.azurewebsites.net/swagger/index.html)\n\n[public-api | 2.2 | RPMMoves | SwaggerHub](https://app.swaggerhub.com/apis-docs/RPMMoves/public-api/2.2#/)\n\n**Production**\n\n- Old URL: [https://app.turvo.com/api/pub](https://protect-us.mimecast.com/s/VEnMCER26vTpZG1PHNmDwP?domain=app.turvo.com)\n- **New URL:** [<b>https://publicapi.turvo.com/v1</b>](https://protect-us.mimecast.com/s/M0ePCG62QxhAzlWgU77QXc?domain=publicapi.turvo.com)\n- Ocp-Apim-Subscription-Key: ??\n    \n\n**Test (Sandbox)**\n\n- Old URL: [https://my-sandbox.turvo.com/api/pub](https://protect-us.mimecast.com/s/dhItCJ627AhKjzpXUzSnpl?domain=my-sandbox.turvo.com)\n- **New URL:** [<b>https://my-sandbox-publicapi.turvo.com/v1</b>](https://protect-us.mimecast.com/s/alc0CKr25Bs4Rw8JFAHrEO?domain=my-sandbox-publicapi.turvo.com)\n- Ocp-Apim-Subscription-Key: fde19cd792314e4389d86ce50a883a7e\n    \n\n**Dev**\n\n- Old URL: ??\n    \n- **New URL:** [https://apim-rpm-api-dev.azure-api.net/v1](https://apim-rpm-api-dev.azure-api.net/v1)\n    \n- Ocp-Apim-Subscription-Key: 5b64a5fb04844ad89e3001d750f76e18",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29370398"
	},
	"item": [
		{
			"name": "Order - Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The id field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/Order/215868",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Order",
						"215868"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order - Document - Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/Order/182806/document/proof_of_delivery",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Order",
						"182806",
						"document",
						"proof_of_delivery"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order - Create - Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"The id field is a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.greaterThan(0);",
							"});",
							"",
							"",
							"pm.test(\"Validate the deliveryLocation object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.deliveryLocation).to.exist;",
							"  pm.expect(responseData.deliveryLocation).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify the vehicles array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.vehicles).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"vin\": \"5YJRE11B081000392\",\r\n  \"year\": 2008,\r\n  \"make\": \"TESLA\",\r\n  \"model\": \"Roadster\",\r\n  \"pickup\": {\r\n    \"locationName\": \"IAP PORT BRUNSWICK\",\r\n    \"locationAddress\": {\r\n      \"streetAddress\": \"Joe Frank Harris Blvd\",\r\n      \"city\": \"Brunswick\",\r\n      \"state\": \"MA\",\r\n      \"postalCode\": \"31523\",\r\n      \"country\": \"United States\"\r\n    },\r\n    \"start\": \"2023-12-30T15:16:16.352Z\",\r\n    \"end\": \"2023-12-30T15:16:16.352Z\"\r\n  },\r\n  \"delivery\": {\r\n    \"locationName\": \"10575 WEST SAM HOUSTON PRK\",\r\n    \"locationAddress\": {\r\n      \"streetAddress\": \"10575 WEST SAM HOUSTON PRK\",\r\n      \"city\": \"HOUSTON\",\r\n      \"state\": \"TX\",\r\n      \"postalCode\": \"77099\",\r\n      \"country\": \"United States\"\r\n    },\r\n    \"start\": \"2023-12-17T15:16:16.352Z\",\r\n    \"end\": \"2023-12-17T15:16:16.352Z\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/Order",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order - Update - Put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"The id field is a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.greaterThan(0);",
							"});",
							"",
							"",
							"pm.test(\"Validate the deliveryLocation object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.deliveryLocation).to.exist;",
							"  pm.expect(responseData.deliveryLocation).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify the vehicles array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.vehicles).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"vin\": \"5YJRE11B081000392\",\r\n  \"year\": 2008,\r\n  \"make\": \"TESLA\",\r\n  \"model\": \"Roadster\",\r\n  \"pickup\": {\r\n    \"locationName\": \"IAP PORT BRUNSWICK\",\r\n    \"locationAddress\": {\r\n      \"streetAddress\": \"Joe 2 Frank Harris Blvd\",\r\n      \"city\": \"Brunswick\",\r\n      \"state\": \"MA\",\r\n      \"postalCode\": \"31523\",\r\n      \"country\": \"United States\"\r\n    },\r\n    \"start\": \"2023-12-30T15:16:16.352Z\",\r\n    \"end\": \"2023-12-30T15:16:16.352Z\"\r\n  },\r\n  \"delivery\": {\r\n    \"locationName\": \"10575 WEST SAM HOUSTON PRK\",\r\n    \"locationAddress\": {\r\n      \"streetAddress\": \"10575 WEST SAM HOUSTON PRK\",\r\n      \"city\": \"HOUSTON\",\r\n      \"state\": \"TX\",\r\n      \"postalCode\": \"77099\",\r\n      \"country\": \"United States\"\r\n    },\r\n    \"start\": \"2023-12-17T15:16:16.352Z\",\r\n    \"end\": \"2023-12-17T15:16:16.352Z\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/Order/215868",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Order",
						"215868"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order - Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These are tests for when the Order is found for Delete = Successful Delete",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"The id field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"// These are tests for when the Order is not found for Delete",
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has an error message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.errorMessage).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Error message is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.errorMessage).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Error message is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.errorMessage).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Error message is descriptive and provides useful information\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.errorMessage).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/Order/204041",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Order",
						"204041"
					],
					"query": [
						{
							"key": "Ocp-Apim-Subscription-Key",
							"value": "fde19cd792314e4389d86ce50a883a7e",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Webhook - Get (All)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"URL is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData[0].url).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"URL should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Secret is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.secret).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Secret should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"IncludeSecretInHeader is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function (webhook) {",
							"        pm.expect(webhook.includeSecretInHeader).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"secret\": \"4321\",\r\n\t\"headerName\": \"secret-key\",\r\n\t\"includeSecretInheader\": true,\r\n\t\"events\": [\r\n    \"shipment_status_update\",\r\n\t\t\"order_cancelled\",\r\n\t\t\"order_updated\"\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/Webhook",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Webhook"
					]
				}
			},
			"response": []
		},
		{
			"name": "Webhook - Get (by ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"URL is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData[0].url).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"URL should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Secret is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.secret).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Secret should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"IncludeSecretInHeader is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function (webhook) {",
							"        pm.expect(webhook.includeSecretInHeader).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"secret\": \"4321\",\r\n\t\"headerName\": \"secret-key\",\r\n\t\"includeSecretInheader\": true,\r\n\t\"events\": [\r\n    \"shipment_status_update\",\r\n\t\t\"order_cancelled\",\r\n\t\t\"order_updated\"\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/Webhook/4",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Webhook",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Webhook - Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'id' field is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'url' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'secret' field is either null or a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.secret).to.satisfy(function (value) {",
							"        return value === null || typeof value === 'string' && value.length > 0;",
							"    }, \"Value should be either null or a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the includeSecretInHeader field is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.includeSecretInHeader).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"url\": \"https://webhook.site/a0370453-381a-4f21-858c-64a6234b5b29\",\r\n  \"events\": [\r\n    \"shipment_status_update\",\r\n\t\t\"order_cancelled\",\r\n\t\t\"order_updated\"\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/Webhook/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Webhook",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Webhook - Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"URL is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.url).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Secret is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.secret).to.be.a('string');",
							"    pm.expect(responseData.secret).to.have.length.above(0);",
							"});",
							"",
							"",
							"pm.test(\"IncludeSecretInHeader is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.includeSecretInHeader).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"secret\": \"7890\",\r\n\t\"headerName\": \"secret-key\",\r\n\t\"includeSecretInheader\": true,\r\n\t\"events\": [\r\n    \"shipment_status_update\",\r\n\t\t\"order_cancelled\",\r\n\t\t\"order_updated\"\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/Webhook/16",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Webhook",
						"16"
					]
				}
			},
			"response": []
		},
		{
			"name": "Webhook - Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.deliveryNumber).to.exist;",
							"    pm.expect(responseData.webhookId).to.exist;",
							"    pm.expect(responseData.payload).to.exist;",
							"    pm.expect(responseData.responseStatusCode).to.exist;",
							"    pm.expect(responseData.responseStatusMessage).to.exist;",
							"    pm.expect(responseData.deliveryDate).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Delivery number is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.deliveryNumber).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Webhook id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.webhookId).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/WebHook/16/ping",
					"host": [
						"{{URL}}"
					],
					"path": [
						"WebHook",
						"16",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "WebHook-Validate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.deliveryNumber).to.exist;",
							"    pm.expect(responseData.webhookId).to.exist;",
							"    pm.expect(responseData.payload).to.exist;",
							"    pm.expect(responseData.responseStatusCode).to.exist;",
							"    pm.expect(responseData.responseStatusMessage).to.exist;",
							"    pm.expect(responseData.deliveryDate).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Delivery number is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.deliveryNumber).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Webhook id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.webhookId).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/WebHook/2/validate",
					"host": [
						"{{URL}}"
					],
					"path": [
						"WebHook",
						"2",
						"validate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Quote - Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"URL is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData[0].url).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"URL should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Secret is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.secret).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Secret should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"IncludeSecretInHeader is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function (webhook) {",
							"        pm.expect(webhook.includeSecretInHeader).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/Quote/182806",
					"host": [
						"{{URL}}"
					],
					"path": [
						"Quote",
						"182806"
					]
				}
			},
			"response": []
		},
		{
			"name": "Quote - Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "fde19cd792314e4389d86ce50a883a7e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"vin\": \"string\",\r\n  \"year\": 0,\r\n  \"make\": \"string\",\r\n  \"model\": \"string\",\r\n  \"odometer\": 0,\r\n  \"numKeys\": 0,\r\n  \"originLocation\": {\r\n    \"streetAddress\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"postalCode\": \"string\",\r\n    \"country\": \"string\"\r\n  },\r\n  \"pickupDate\": \"string\",\r\n  \"destinationLocation\": {\r\n    \"streetAddress\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"postalCode\": \"string\",\r\n    \"country\": \"string\"\r\n  },\r\n  \"deliveryDate\": \"string\",\r\n  \"customReferenceIdentifers\": [\r\n    {\r\n      \"key\": \"string\",\r\n      \"value\": \"string\"\r\n    }\r\n  ],\r\n  \"notes\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/quote/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"quote",
						""
					]
				}
			},
			"response": []
		}
	]
}